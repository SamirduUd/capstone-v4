Description: 'This is a CloudFormation code to create a WebApplication with Load Balancer and AutoScaling group'

Parameters:
  EnvironmentName:
      Type: String
      Default: CapstoneProject

  AMI:
      Type: String
      Default: "ami-0603cbe34fd08cb81" #Amazon Linux 2 AMI (HVM), SSD Volume Type

  InstanceType:
    Type: String
    Default: "t3.small"  #2 vCPU and 4 GB RAM     
    
Resources:
  LoadBalancerSG: #Allow HTTP from the internet to our load balancer
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Allow HTTP to LB"
      VpcId: 
        Fn::ImportValue: !Sub "${EnvironmentName}-VPCID"      
      SecurityGroupIngress:
        - IpProtocol: tcp
          CidrIp: "0.0.0.0/0"
          FromPort: 80
          ToPort: 80

      SecurityGroupEgress:
        - IpProtocol: tcp
          CidrIp: "0.0.0.0/0"
          FromPort: 80
          ToPort: 80

  WebServersSG: #Allow HTTP from Load Balancer to Application Servers
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Application security group"
      VpcId: 
        Fn::ImportValue: !Sub "${EnvironmentName}-VPCID" 
      SecurityGroupIngress:
        - IpProtocol: tcp
          SourceSecurityGroupId: !Ref LoadBalancerSG
          FromPort: 80
          ToPort: 80

  WebAppLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties: 
      SecurityGroups:
        - !Ref WebServersSG
      UserData:
        Fn::Base64:
          Fn::Join:
           - ''
           - - "#!/bin/bash \n"
             - "apt-get update -y \n"
             - "apt-get install unzip awscli -y \n"
             - "apt-get install apache2 -y \n"
             - "systemctl start apache2.service \n"
             - "cd /var/www/html \n "
             - "aws s3 cp s3://myudacitys3/index.html . \n"
      ImageId: !Ref AMI
      InstanceType: !Ref InstanceType 
      BlockDeviceMappings: 
      - DeviceName: /dev/sda1
        Ebs: 
          VolumeSize: 10 #at least 10GB space
          VolumeType: gp2
      IamInstanceProfile: !Ref ProfileWithRolesForOurApp
  
  WebServerGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:        
         - Fn::ImportValue: !Sub "${EnvironmentName}-PrivateSubnet1" 
         - Fn::ImportValue: !Sub "${EnvironmentName}-PrivateSubnet1" 
      LaunchConfigurationName:
        Ref: WebAppLaunchConfig
      MinSize: '4'    #Minimum 4 servers 
      MaxSize: '6'
      TargetGroupARNs:
      - Ref: WebAppTargetGroup
  
  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: 
      - LoadBalancer    
    Properties:
      TargetType: instance  
      VpcId: 
        Fn::ImportValue: !Sub "${EnvironmentName}-VPCID" 
      Protocol: HTTP 
      Port: 80
      HealthCheckPath: /
      HealthCheckIntervalSeconds: 10
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 5

  LoadBalancer: #Creating the LB in Public subnets
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets: 
        - Fn::ImportValue: !Sub "${EnvironmentName}-PublicSubnet1"
        - Fn::ImportValue: !Sub "${EnvironmentName}-PublicSubnet2"
      SecurityGroups:
        - !Ref LoadBalancerSG  

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - LoadBalancer
      - WebAppTargetGroup
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref WebAppTargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
 
  LoadBalancerListenerRule: 
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref WebAppTargetGroup
      Conditions:
            - Field: path-pattern
              Values: [/]
      ListenerArn: !Ref Listener
      Priority: 1

  UdacityS3ReadOnlyEC2: #Define the IAM Role that allows instances to use the S3 Service
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns: 
        - "arn:aws:iam::aws:policy/CloudWatchFullAccess"
        - "arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess"
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "ec2.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"

  ProfileWithRolesForOurApp:  #Final Project Starter
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Path: "/"
      Roles: 
        - !Ref UdacityS3ReadOnlyEC2
           
Outputs:
  URL:
    Value:
      Fn::Join:
      - ''
      - - http:// #Add 'http://' in front of the load balancer DNS Name 
        - Fn::GetAtt:
          - LoadBalancer
          - DNSName
